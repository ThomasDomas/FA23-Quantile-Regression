---
title: "Quantile regression"
author: "Jorge Galdos, Noureldin Kamel, and Thomas Domas"
format:
  revealjs:
    theme: dark
    footer: "Quantile Regression - Advanced Statistical Modeling Fall"

bibliography: presentation-references.bib
---

# Introduction

## 1. Mathematical Properties

-   Quantile regression (QR) model specification as compared to ordinary least squares
-   Generalization to QR specification from median regression
-   Illustration of QR behavior for different parameters

## 2. Real-World Benefits

-   Comparison of QR to OLS performance using home price data
-   Measuring performance in extreme subsets of the data
-   Testing OLS and QR model assumptions on data

## 3. Significance Analysis and Model Interpretation

-   Significance across different quantiles
-   QR model interpretation

# Methods

## Ordinary Least Squares Specification

-   The OLS model is specified by minimizing the sum of squared residuals: $$
    argmin\sum_i^n \epsilon_i^2 = argmin\sum_i^n (y_i - \hat{y}_i)^2
    $$
-   The sum of squared residuals are theoretically minimized by the conditional mean of of $y$ given the predictors $X$

## Median Regression {.smaller}

::: columns
::: {.column width="60%"}
-   Median regression minimizes the sum of **absolute** residuals:

    $$argmin \space E(|y-\hat{y}|)$$

-   The expected value of the absolute sum of deviations from a given center c can be split into the following two terms \[2\]:

    $$E|Y - c| = \int_{y\in R}|y-c|f(y)dy \\
    =\int_{y < c} |y-c|f(y)dy + \int_{y>c}|y-c|f(y)dy  \\
    =\int_{y<c}(c-y)f(y)dy + \int_{y>c}(y-c)f(y)dy \\$$
:::

::: {.column width="40%"}
-   Differentiating $E|y-c|$ with respect to $c$ leads to the solution of the minimum:

$$
\frac{\partial}{\partial c}E|y-c|=0
$$

-   After differentiating the integrals on the left we will arrive at the conclusion that $c$ is the **median**.
:::
:::

## Generalization to Quantile Regression {.smaller}

-   To generalize the previous in order to estimate **conditional quantiles**, weights must be introduced:

$$
\frac{\partial}{\partial c} E\left[\rho_\theta(Y-c)\right]=\frac{\partial}{\partial c}\left\{(1-\theta) \int_{-\infty}^c|y-c| f(y) d y+\theta \int_c^{+\infty}|y-c| f(y) d y\right\}
$$

-   The solution to the minimization problem is the $\theta$th quantile, $q_\theta$:

$$
F(c)-\theta F(c)-\theta+\theta F(c)=0 \Longrightarrow F(c)=\theta \Longrightarrow c=q_\theta
$$

# Data

```{r, echo=FALSE, include=FALSE}
library(quantreg)
library(Metrics)
require(gridExtra)
library(ggplot2)

df <- read.csv("TrainData.csv") |>
  na.omit()
```

## 1. data used

-   We used a dataset of houses that had several houses, their prices and thier different features. The variable we are predicting are the prices of the houses

-   After cleaning the data, we ended up with `r length(df$SalePrice)` entries.

-   The columns we used in our study were: above ground living area, Total number of rooms, Area of lot which were continuous variables. And we used foundation type and lot shape as our categorical variables.

## 2. Visualizations

Using gridExtra by @gridExtra and ggplot2 by @ggplot2

```{r 'Visualizing data', warning=FALSE}
suppressWarnings({

p1 <- df |> ggplot(aes(x = GrLivArea)) + geom_histogram(binwidth = 100) + theme_bw() + theme(axis.text.y = element_blank(), axis.text.x = element_text(angle = 90), axis.ticks.y = element_blank()) + ylab(NULL) + xlab("House Area (sq. ft.)") + scale_x_continuous(position = "top")

# p2 <- df |> ggplot(aes(x = LotArea)) + geom_histogram(binwidth = 5) + theme_bw() + theme(axis.text.y = element_blank(), axis.text.x = element_text(angle = 90), axis.ticks.y = element_blank()) + ylab(NULL) + xlab("Year Built") + scale_x_continuous(position = "top")

p3 <- df |> ggplot(aes(x = Foundation)) + geom_histogram(stat="count") + theme_bw() + theme(axis.text.y = element_blank(), axis.text.x = element_text(angle = 90), axis.ticks.y = element_blank()) + ylab(NULL) + xlab("Foundation type") + scale_x_discrete(position = "top")

p4 <- ggplot() + theme_minimal()

p5 <- df |> ggplot(aes(x = GrLivArea, y = SalePrice)) + geom_point() + theme_bw() + theme(axis.text = element_blank(), axis.ticks = element_blank()) + ylab(NULL) + xlab(NULL)

# p6 <- df |> ggplot(aes(x = LotArea, y = SalePrice)) + geom_point() + theme_bw() + theme(axis.text = element_blank(), axis.ticks = element_blank()) + ylab(NULL) + xlab(NULL)

p7 <- df |> ggplot(aes(x = Foundation, y = SalePrice)) + geom_point() + theme_bw() + theme(axis.text = element_blank(), axis.ticks = element_blank()) + ylab(NULL) + xlab(NULL)

p8 <- df |> ggplot(aes(x = SalePrice)) + geom_histogram(binwidth = 10000) + theme_bw() + ylab(NULL) + xlab("Sale Price ($)") + coord_flip() + scale_x_continuous(position = "top") + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())

# grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, nrow = 2)
grid.arrange(p1, p3, p4, p5, p7, p8, nrow = 2)

})
```

# Analysis

## 1. Analysis

In this section we compared the results of OLS model with the results of quantile regression models

## 2. Visualizing models

```{r, 'Visualizing housing cont', warning=FALSE}
df |> ggplot(aes(y = SalePrice, x = GrLivArea)) +
  geom_point(size = 0.9) +
  stat_smooth(method = lm, color = "black") +
  geom_text(aes(x = 4150, y = 500000, label = "OLS"), color="black") + 
  geom_quantile(quantiles=0.25, color="red") + 
  geom_text(aes(x = 4000, y = 270000, label = "25th quantile"), color="red") + 
  geom_quantile(quantiles=0.5, color="blue") + 
  geom_text(aes(x = 4150, y = 400000, label = "50th"), color="blue") + 
  geom_quantile(quantiles=0.75, color="green") + 
  geom_text(aes(x = 4000, y = 600000, label = "75th quantile"), color="green") + 
  xlab("Sale price ($)") +
  ylab("Above ground area (Square feet)") +
  theme_bw()
```

```{r 'OLS model creation', warning=FALSE, include=FALSE}
qr50 = rq(data=df, SalePrice ~ GrLivArea + LotArea + TotRmsAbvGrd + as.factor(LotShape) + as.factor(Foundation), tau=0.5)
qr50_summary = summary(qr50)

ols = lm(data=df, SalePrice ~ GrLivArea + LotArea + TotRmsAbvGrd + as.factor(LotShape) + as.factor(Foundation))
ols_summary = summary(ols)
ols_summary

taus <- seq(from=0, to=1, by=.01)
qrs = rq(data=df, SalePrice ~ GrLivArea + LotArea + TotRmsAbvGrd + as.factor(LotShape) + as.factor(Foundation), tau=taus)
```

```{r 'MAE for different quantiles', warning=FALSE, include=FALSE}
fullDataLength = length(df$SalePrice)
fullDataLength
count10per = fullDataLength / 10
count10per
sorted_df_desc <- df[order(-df$SalePrice),]
Q90SalePrice <- sorted_df_desc[0:count10per, ] # data greater than 90% of data
length(Q90SalePrice$SalePrice)

qr90_m = rq(data=df, SalePrice ~ GrLivArea + LotArea + TotRmsAbvGrd + as.factor(LotShape) + as.factor(Foundation), tau=0.90)

ols_q90_predictions <- predict(ols, newdata=Q90SalePrice)
ols_q90_mae <- mae(ols_q90_predictions, Q90SalePrice$SalePrice)
ols_q90_mae

qr90_q90_predictions <- predict(qr90_m, newdata=Q90SalePrice)
qr90_q90_mae <- mae(qr90_q90_predictions, Q90SalePrice$SalePrice)
qr90_q90_mae

###########
sorted_df_asc <- df[order(df$SalePrice),]
length(sorted_df_asc$SalePrice)
Q10SalePrice <- sorted_df_asc[0:count10per, ] # data lower than 90% of data
length(Q10SalePrice$SalePrice)

qr10_m = rq(data=df, SalePrice ~ GrLivArea + LotArea + TotRmsAbvGrd + as.factor(LotShape) + as.factor(Foundation), tau=0.10)

ols_q10_predictions <- predict(ols, newdata=Q10SalePrice)
ols_q10_mae <- mae(ols_q10_predictions, Q10SalePrice$SalePrice)
ols_q10_mae

qr10_q10_predictions <- predict(qr10_m, newdata=Q10SalePrice)
qr10_q10_mae <- mae(qr10_q10_predictions, Q10SalePrice$SalePrice)
qr10_q10_mae

```

```{r 'Min/Max Error', warning=FALSE, include=FALSE}
ols_r <- ols_summary$residuals
# Min OLS error
ols_r_min <- format(round(min(ols_r), digits=0), scientific=F)
# Absolute min OLS error
ols_r_min_abs <- format(round(min(abs(ols_r)), digits=0), scientific=F)
# Max OLS error
ols_r_max <- format(round(max(ols_r), digits=0), scientific=F)
# Absolute max OLS error
ols_r_max_abs <- format(round(max(abs(ols_r)), digits=0), scientific=F)
# Avg QR OLS error
ols_r_mean_abs <- format(round(mean(abs(ols_r)), digits=0), scientific=F)

# Min QR 50th error
qr50_r <- qr50_summary$residuals
qr50_r_min <- format(round(min(qr50_r), digits=0), scientific=F)
# Absolute min QR 50th error
qr50_r_min_abs <- format(round(min(abs(qr50_r)), digits=0), scientific=F)
# Max QR 50th error
qr50_r_max <- format(round(max(qr50_r), digits=0), scientific=F)
# Absolute max QR 50th error
qr50_r_max_abs <- format(round(max(abs(qr50_r)), digits=0), scientific=F)
# Avg QR 50th error
qr50_r_mean_abs <- format(round(mean(abs(qr50_r)), digits=0), scientific=F)



ols_q90_r <- Q90SalePrice$SalePrice - ols_q90_predictions
# Avg OLS error
ols_q90_r_abs_avg <- format(round(mean(abs(ols_q90_r)), digits=0), scientific=F)
# Min OLS error
ols_q90_r_min <- format(round(min(ols_q90_r), digits=0), scientific=F)
# Absolute min OLS error
ols_q90_r_min_abs <- format(round(min(abs(ols_q90_r)), digits=0), scientific=F)
# Max OLS error
ols_q90_r_max <- format(round(max(ols_q90_r), digits=0), scientific=F)
# Absolute max OLS error
ols_q90_r_max_abs <- format(round(max(abs(ols_q90_r)), digits=0), scientific=F)

### QR for tau = 0.9
qr90_q90_r <- Q90SalePrice$SalePrice - qr90_q90_predictions
# Avg QR 90th error
qr90_q90_r_abs_avg <- format(round(mean(abs(qr90_q90_r)), digits=0), scientific=F)
# Min QR 90th error
qr90_q90_r_min <- format(round(min(qr90_q90_r), digits=0), scientific=F)
# Absolute min QR 90th error
qr90_q90_r_min_abs <- format(round(min(abs(qr90_q90_r)), digits=0), scientific=F)
# Max QR 90th error
qr90_q90_r_max <- format(round(max(qr90_q90_r), digits=0), scientific=F)
# Absolute max QR 90th error
qr90_q90_r_max_abs <- format(round(max(abs(qr90_q90_r)), digits=0), scientific=F)



ols_q10_r <- Q10SalePrice$SalePrice - ols_q10_predictions
# Avg OLS error
ols_q10_r_abs_avg <- format(round(mean(abs(ols_q10_r)), digits=0), scientific=F)
# Min OLS error
ols_q10_r_min <- format(round(min(ols_q10_r), digits=0), scientific=F)
# Absolute min OLS error
ols_q10_r_min_abs <- format(round(min(abs(ols_q10_r)), digits=0), scientific=F)
# Max OLS error
ols_q10_r_max <- format(round(max(ols_q10_r), digits=0), scientific=F)
# Absolute max OLS error
ols_q10_r_max_abs <- format(round(max(abs(ols_q10_r)), digits=0), scientific=F)

qr10_q10_r <- Q10SalePrice$SalePrice - qr10_q10_predictions
# Avg QR 10th error
qr10_q10_r_abs_avg <- format(round(mean(abs(qr10_q10_r)), digits=0), scientific=F)
# Min QR 10th error
qr10_q10_r_min <- format(round(min(qr10_q10_r), digits=0), scientific=F)
# Absolute min QR 10th error
qr10_q10_r_min_abs <- format(round(min(abs(qr10_q10_r)), digits=0), scientific=F)
# Max QR 10th error
qr10_q10_r_max <- format(round(max(qr10_q10_r), digits=0), scientific=F)
# Absolute max QR 10th error
qr10_q10_r_max_abs <- format(round(max(abs(qr10_q10_r)), digits=0), scientific=F)

# function to make text bold
emphSmaller <- function(s, c) {
  ifelse(abs(as.numeric(s)) <= abs(as.numeric(c)), paste("<u>", s, "</u>", sep=""), paste(s, sep=""))
}
```

## Min/Max Errors table

::: r-fit-text
For testing with the whole data

|      Model | Data |                Mean |            Min |            Abs Min |            Max |            Abs Max |
|----------:|----------:|----------:|----------:|----------:|----------:|----------:|
|        OLS |  All |  `r ols_r_mean_abs` |  `r ols_r_min` |  `r ols_r_min_abs` |  `r ols_r_max` |  `r ols_r_max_abs` |
| QR-tau=0.5 |  All | `r emphSmaller(qr50_r_mean_abs, ols_r_mean_abs)` | `r emphSmaller(qr50_r_min, ols_r_min)` | `r emphSmaller(qr50_r_min_abs, ols_r_min_abs)` | `r emphSmaller(qr50_r_max, ols_r_max)` | `r emphSmaller(qr50_r_max_abs, ols_r_max_abs)` |

For testing with focused data

|      Model |          Data |                   Mean |                Min |                Abs Min |                Max |                Abs Max |
|----------:|----------:|----------:|----------:|----------:|----------:|----------:|
|        OLS | 10th Quantile |  `r ols_q10_r_abs_avg` |  `r ols_q10_r_min` |  `r ols_q10_r_min_abs` |  `r ols_q10_r_max` |  `r ols_q10_r_max_abs` |
| QR-tau=0.1 | 10th Quantile | `r emphSmaller(qr10_q10_r_abs_avg, ols_q10_r_abs_avg)` | `r emphSmaller(qr10_q10_r_min, ols_q10_r_min)` | `r emphSmaller(qr10_q10_r_min_abs, ols_q10_r_min_abs)` | `r emphSmaller(qr10_q10_r_max, ols_q10_r_max)` | `r emphSmaller(qr10_q10_r_max_abs, ols_q10_r_max_abs)` |
|        OLS | 90th Quantile |  `r ols_q90_r_abs_avg` |  `r ols_q90_r_min` |  `r ols_q90_r_min_abs` |  `r ols_q90_r_max` |  `r ols_q90_r_max_abs` |
| QR-tau=0.9 | 90th Quantile | `r emphSmaller(qr90_q90_r_abs_avg, ols_q90_r_abs_avg)` | `r emphSmaller(qr90_q90_r_min, ols_q90_r_min)` | `r emphSmaller(qr90_q90_r_min_abs, ols_q90_r_min_abs)` | `r emphSmaller(qr90_q90_r_max, ols_q90_r_max)` | `r emphSmaller(qr90_q90_r_max_abs, ols_q90_r_max_abs)` |
:::

```{r, warnings=FALSE, include=FALSE}
getQrModel <- function(data1, tau1, equation) {
  rq(data=data1, equation, tau=tau1)
}

getPvalue <- function(model1, model2) {
  anova(model1, model2)["table"]$table["pvalue"]
}

formatNumber <- function(x) {
  format(round(x, digits=2), scientific=TRUE)
}

emphSignificant <- function(n) {
  n <- format(n, scientific=T)
  ifelse(as.numeric(n) < 0.01, paste(n, "**", sep=""), paste("<u>", n, "</u>", sep=""))
}

eq_full <- SalePrice ~ GrLivArea + LotArea + TotRmsAbvGrd + as.factor(LotShape) + as.factor(Foundation)
eq_no_foundation <- SalePrice ~ GrLivArea + LotArea + TotRmsAbvGrd + as.factor(LotShape)
eq_no_lotshape <- SalePrice ~ GrLivArea + LotArea + TotRmsAbvGrd + as.factor(Foundation)


qr15 <- getQrModel(df, 0.15, eq_full)
qr15_no_f <- getQrModel(df, 0.15, eq_no_foundation)
qr15_no_lot <- getQrModel(df, 0.15, eq_no_lotshape)

foundation_15_p <- getPvalue(qr15, qr15_no_f)
lotshape_15_p <- getPvalue(qr15, qr15_no_lot)


qr25 <- getQrModel(df, 0.25, eq_full)
qr25_no_f <- getQrModel(df, 0.25, eq_no_foundation)
qr25_no_lot <- getQrModel(df, 0.25, eq_no_lotshape)

foundation_25_p <- getPvalue(qr25, qr25_no_f)
lotshape_25_p <- getPvalue(qr25, qr25_no_lot)


qr50 <- getQrModel(df, 0.50, eq_full)
qr50_no_f <- getQrModel(df, 0.50, eq_no_foundation)
qr50_no_lot <- getQrModel(df, 0.50, eq_no_lotshape)

foundation_50_p <- getPvalue(qr50, qr50_no_f)
lotshape_50_p <- getPvalue(qr50, qr50_no_lot)


qr80 <- getQrModel(df, 0.80, eq_full)
qr80_no_f <- getQrModel(df, 0.80, eq_no_foundation)
qr80_no_lot <- getQrModel(df, 0.80, eq_no_lotshape)

foundation_80_p <- getPvalue(qr80, qr80_no_f)
lotshape_80_p <- getPvalue(qr80, qr80_no_lot)


qr95 <- getQrModel(df, 0.95, eq_full)
qr95_no_f <- getQrModel(df, 0.95, eq_no_foundation)
qr95_no_lot <- getQrModel(df, 0.95, eq_no_lotshape)

foundation_95_p <- getPvalue(qr95, qr95_no_f)
lotshape_95_p <- getPvalue(qr95, qr95_no_lot)

anova_ols_foundation <- anova(ols, lm(data=df, eq_no_foundation))
anova_ols_lotshape <- anova(ols, lm(data=df, eq_no_lotshape))
```

## 3.1 Significance of categorical variables


::: r-fit-text
Alpha=0.01

|    Quantile |   foundation p-value |    lot shape p-value |
|--------------:|--------------:|--------------:|--------------:|--------------:|
| QR-tau=0.15 |  `r emphSignificant(foundation_15_p)` |  `r emphSignificant(lotshape_15_p)` |
| QR-tau=0.25 |  `r emphSignificant(foundation_25_p)` |  `r emphSignificant(lotshape_25_p)` |
| QR-tau=0.50 |  `r emphSignificant(foundation_50_p)` |  `r emphSignificant(lotshape_50_p)` |
| QR-tau=0.80 |  `r emphSignificant(foundation_80_p)` |  `r emphSignificant(lotshape_80_p)` |
| QR-tau=0.95 |  `r emphSignificant(foundation_95_p)` |  `r emphSignificant(lotshape_95_p)` |
|         OLS | `r emphSignificant(anova_ols_foundation[2,][6][[1]])` | `r emphSignificant(anova_ols_lotshape[2,][6][[1]])` |
:::

```{r, Warning=FALSE, include=FALSE}
qrs_summary <- summary(qrs, se = "iid")
#tau: 0.1
q10_sig <- qrs_summary[11][[1]]$coefficients[,4][0:4]
#tau: 0.25
q25_sig <- qrs_summary[26][[1]]$coefficients[,4][0:4]
#tau: 0.5
q50_sig <- qrs_summary[51][[1]]$coefficients[,4][0:4]
#tau: 0.75
q75_sig <- qrs_summary[76][[1]]$coefficients[,4][0:4]
#tau: 0.9
q90_sig <- qrs_summary[91][[1]]$coefficients[,4][0:4]
#ols significance
ols_pvalues <- ols_summary$coefficients[,4]
```

## 3.2 Significance of continuous variables

::: r-fit-text
Alpha=0.01

|       Model |            GrLivArea p-value |              TotRmsAbvGrd p-value |                 LotArea p-value |
|----------:|----------:|----------:|----------:|----------:|----------:|----------:|
| QR-tau=0.15 |               `r emphSignificant(q10_sig[2])` |                  `r emphSignificant(q10_sig[4])` |             `r emphSignificant(q10_sig[3])` |
| QR-tau=0.25 |               `r emphSignificant(q25_sig[2])` |                  `r emphSignificant(q25_sig[4])` |             `r emphSignificant(q25_sig[3])` |
| QR-tau=0.50 |               `r emphSignificant(q50_sig[2])` |                  `r emphSignificant(q50_sig[4])` |             `r emphSignificant(q50_sig[3])` |
| QR-tau=0.75 |               `r emphSignificant(q75_sig[2])` |                  `r emphSignificant(q75_sig[4])` |             `r emphSignificant(q75_sig[3])` |
| QR-tau=0.90 |               `r emphSignificant(q90_sig[2])` |                  `r emphSignificant(q90_sig[4])` |             `r emphSignificant(q90_sig[3])` |
|         OLS | `r emphSignificant(ols_pvalues["GrLivArea"])` | `r emphSignificant(ols_pvalues["TotRmsAbvGrd"])` | `r emphSignificant(ols_pvalues["LotArea"])` |
:::

```{r 'Mean absolute error', warning=FALSE, include=FALSE}
olsMae = mae(predict(ols), df$SalePrice)
olsMae
Qr50Mae = mae(predict(qr50), df$SalePrice)
Qr50Mae
```

```{r 'Root mean squared error', warning=FALSE, include=FALSE}
olsRmse = rmse(predict(ols), df$SalePrice)
olsRmse
Qr50Rmse = rmse(predict(qr50), df$SalePrice)
Qr50Rmse
```

```{r 'Root mean squared error for specific quantiles', warning=FALSE, include=FALSE}
ols_q90_rmse <- rmse(ols_q90_predictions, Q90SalePrice$SalePrice)
ols_q90_rmse

qr90_q90_rmse <- rmse(qr90_q90_predictions, Q90SalePrice$SalePrice)
qr90_q90_rmse

ols_q10_rmse <- rmse(ols_q10_predictions, Q10SalePrice$SalePrice)
ols_q10_rmse

qr10_q10_rmse <- rmse(qr10_q10_predictions, Q10SalePrice$SalePrice)
qr10_q10_rmse
```

## Errors for whole data testing


|       Model | Data |                                                RMSE |                                                MAE |
|-----------------:|-----------------:|-----------------:|-----------------:|
|        OLS: |  All |  `r format(round(olsRmse, digits=2), scientific=F)` |  `r format(round(olsMae, digits=2), scientific=F)` |
| QR-tau=0.5: |  All | `r format(round(Qr50Rmse, digits=2), scientific=F)` | `r format(round(Qr50Mae, digits=2), scientific=F)` |

## Errors for focused data testing

<!-- 
Most people when buying a house they will be looking at a specific price range
-->

::: r-fit-text

For houses ***above*** 90% of others

|       Model |          Data |                                                     RMSE |                                                     MAE |
|-----------------:|-----------------:|-----------------:|-----------------:|
|        OLS: | 90th-Quantile |  `r format(round(ols_q90_rmse, digits=2), scientific=F)` |  `r format(round(ols_q90_mae, digits=2), scientific=F)` |
| QR-tau=0.9: | 90th-Quantile | `r format(round(qr90_q90_rmse, digits=2), scientific=F)` | `r format(round(qr90_q90_mae, digits=2), scientific=F)` |

For houses ***below*** 90% of others

|       Model |          Data |                                                     RMSE |                                                     MAE |
|-----------------:|-----------------:|-----------------:|-----------------:|
|        OLS: | 10th-Quantile |  `r format(round(ols_q10_rmse, digits=2), scientific=F)` |  `r format(round(ols_q10_mae, digits=2), scientific=F)` |
| QR-tau=0.1: | 10th-Quantile | `r format(round(qr10_q10_rmse, digits=2), scientific=F)` | `r format(round(qr10_q10_mae, digits=2), scientific=F)` |
:::

# Summary

# References
